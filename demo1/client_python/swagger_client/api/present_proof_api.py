# coding: utf-8

"""
    (Aries Agent REST Server) of VC4SM University.

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PresentProofApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def present_proof_accept_presentation(self, piid, **kwargs):  # noqa: E501
        """Accepts a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_accept_presentation(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param Body19 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_accept_presentation_with_http_info(piid, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_accept_presentation_with_http_info(piid, **kwargs)  # noqa: E501
            return data

    def present_proof_accept_presentation_with_http_info(self, piid, **kwargs):  # noqa: E501
        """Accepts a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_accept_presentation_with_http_info(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param Body19 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['piid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_accept_presentation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'piid' is set
        if ('piid' not in params or
                params['piid'] is None):
            raise ValueError("Missing the required parameter `piid` when calling `present_proof_accept_presentation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'piid' in params:
            path_params['piid'] = params['piid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/presentproof/{piid}/accept-presentation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_accept_problem_report(self, piid, **kwargs):  # noqa: E501
        """Accepts a problem report.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_accept_problem_report(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_accept_problem_report_with_http_info(piid, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_accept_problem_report_with_http_info(piid, **kwargs)  # noqa: E501
            return data

    def present_proof_accept_problem_report_with_http_info(self, piid, **kwargs):  # noqa: E501
        """Accepts a problem report.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_accept_problem_report_with_http_info(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['piid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_accept_problem_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'piid' is set
        if ('piid' not in params or
                params['piid'] is None):
            raise ValueError("Missing the required parameter `piid` when calling `present_proof_accept_problem_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'piid' in params:
            path_params['piid'] = params['piid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/presentproof/{piid}/accept-problem-report', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_accept_propose_presentation(self, piid, **kwargs):  # noqa: E501
        """Accepts a propose presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_accept_propose_presentation(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param Body20 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_accept_propose_presentation_with_http_info(piid, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_accept_propose_presentation_with_http_info(piid, **kwargs)  # noqa: E501
            return data

    def present_proof_accept_propose_presentation_with_http_info(self, piid, **kwargs):  # noqa: E501
        """Accepts a propose presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_accept_propose_presentation_with_http_info(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param Body20 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['piid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_accept_propose_presentation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'piid' is set
        if ('piid' not in params or
                params['piid'] is None):
            raise ValueError("Missing the required parameter `piid` when calling `present_proof_accept_propose_presentation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'piid' in params:
            path_params['piid'] = params['piid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/presentproof/{piid}/accept-propose-presentation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_accept_request_presentation(self, piid, **kwargs):  # noqa: E501
        """Accepts a request presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_accept_request_presentation(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param Body21 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_accept_request_presentation_with_http_info(piid, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_accept_request_presentation_with_http_info(piid, **kwargs)  # noqa: E501
            return data

    def present_proof_accept_request_presentation_with_http_info(self, piid, **kwargs):  # noqa: E501
        """Accepts a request presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_accept_request_presentation_with_http_info(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param Body21 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['piid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_accept_request_presentation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'piid' is set
        if ('piid' not in params or
                params['piid'] is None):
            raise ValueError("Missing the required parameter `piid` when calling `present_proof_accept_request_presentation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'piid' in params:
            path_params['piid'] = params['piid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/presentproof/{piid}/accept-request-presentation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_actions(self, **kwargs):  # noqa: E501
        """Returns pending actions that have not yet to be executed or cancelled.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_actions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_actions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_actions_with_http_info(**kwargs)  # noqa: E501
            return data

    def present_proof_actions_with_http_info(self, **kwargs):  # noqa: E501
        """Returns pending actions that have not yet to be executed or cancelled.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_actions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_actions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/presentproof/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_decline_presentation(self, piid, **kwargs):  # noqa: E501
        """Declines a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_decline_presentation(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param str reason: Reason is an explanation of why it was declined
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_decline_presentation_with_http_info(piid, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_decline_presentation_with_http_info(piid, **kwargs)  # noqa: E501
            return data

    def present_proof_decline_presentation_with_http_info(self, piid, **kwargs):  # noqa: E501
        """Declines a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_decline_presentation_with_http_info(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param str reason: Reason is an explanation of why it was declined
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['piid', 'reason']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_decline_presentation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'piid' is set
        if ('piid' not in params or
                params['piid'] is None):
            raise ValueError("Missing the required parameter `piid` when calling `present_proof_decline_presentation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'piid' in params:
            path_params['piid'] = params['piid']  # noqa: E501

        query_params = []
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/presentproof/{piid}/decline-presentation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_decline_propose_presentation(self, piid, **kwargs):  # noqa: E501
        """Declines a propose presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_decline_propose_presentation(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param str reason: Reason is an explanation of why it was declined
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_decline_propose_presentation_with_http_info(piid, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_decline_propose_presentation_with_http_info(piid, **kwargs)  # noqa: E501
            return data

    def present_proof_decline_propose_presentation_with_http_info(self, piid, **kwargs):  # noqa: E501
        """Declines a propose presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_decline_propose_presentation_with_http_info(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param str reason: Reason is an explanation of why it was declined
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['piid', 'reason']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_decline_propose_presentation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'piid' is set
        if ('piid' not in params or
                params['piid'] is None):
            raise ValueError("Missing the required parameter `piid` when calling `present_proof_decline_propose_presentation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'piid' in params:
            path_params['piid'] = params['piid']  # noqa: E501

        query_params = []
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/presentproof/{piid}/decline-propose-presentation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_decline_request_presentation(self, piid, **kwargs):  # noqa: E501
        """Declines a request presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_decline_request_presentation(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param str reason: Reason is an explanation of why it was declined
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_decline_request_presentation_with_http_info(piid, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_decline_request_presentation_with_http_info(piid, **kwargs)  # noqa: E501
            return data

    def present_proof_decline_request_presentation_with_http_info(self, piid, **kwargs):  # noqa: E501
        """Declines a request presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_decline_request_presentation_with_http_info(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param str reason: Reason is an explanation of why it was declined
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['piid', 'reason']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_decline_request_presentation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'piid' is set
        if ('piid' not in params or
                params['piid'] is None):
            raise ValueError("Missing the required parameter `piid` when calling `present_proof_decline_request_presentation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'piid' in params:
            path_params['piid'] = params['piid']  # noqa: E501

        query_params = []
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/presentproof/{piid}/decline-request-presentation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_negotiate_request_presentation(self, piid, **kwargs):  # noqa: E501
        """Is used by the Prover to counter a presentation request they received with a proposal.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_negotiate_request_presentation(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param Body22 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_negotiate_request_presentation_with_http_info(piid, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_negotiate_request_presentation_with_http_info(piid, **kwargs)  # noqa: E501
            return data

    def present_proof_negotiate_request_presentation_with_http_info(self, piid, **kwargs):  # noqa: E501
        """Is used by the Prover to counter a presentation request they received with a proposal.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_negotiate_request_presentation_with_http_info(piid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str piid: Protocol instance ID (required)
        :param Body22 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['piid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_negotiate_request_presentation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'piid' is set
        if ('piid' not in params or
                params['piid'] is None):
            raise ValueError("Missing the required parameter `piid` when calling `present_proof_negotiate_request_presentation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'piid' in params:
            path_params['piid'] = params['piid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/presentproof/{piid}/negotiate-request-presentation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_send_propose_presentation(self, **kwargs):  # noqa: E501
        """Sends a propose presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_send_propose_presentation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body17 body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_send_propose_presentation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_send_propose_presentation_with_http_info(**kwargs)  # noqa: E501
            return data

    def present_proof_send_propose_presentation_with_http_info(self, **kwargs):  # noqa: E501
        """Sends a propose presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_send_propose_presentation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body17 body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_send_propose_presentation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/presentproof/send-propose-presentation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_send_request_presentation(self, **kwargs):  # noqa: E501
        """Sends a request presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_send_request_presentation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body18 body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_send_request_presentation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_send_request_presentation_with_http_info(**kwargs)  # noqa: E501
            return data

    def present_proof_send_request_presentation_with_http_info(self, **kwargs):  # noqa: E501
        """Sends a request presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_send_request_presentation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body18 body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_send_request_presentation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/presentproof/send-request-presentation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
