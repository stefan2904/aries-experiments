# coding: utf-8

"""
    (Aries Agent REST Server) of VC4SM University.

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SendReplyMessageArgs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'await_reply': 'AwaitReply',
        'message_id': 'str',
        'message_body': 'object',
        'start_new_thread': 'bool'
    }

    attribute_map = {
        'await_reply': 'await_reply',
        'message_id': 'message_ID',
        'message_body': 'message_body',
        'start_new_thread': 'start_new_thread'
    }

    def __init__(self, await_reply=None, message_id=None, message_body=None, start_new_thread=None):  # noqa: E501
        """SendReplyMessageArgs - a model defined in Swagger"""  # noqa: E501

        self._await_reply = None
        self._message_id = None
        self._message_body = None
        self._start_new_thread = None
        self.discriminator = None

        if await_reply is not None:
            self.await_reply = await_reply
        if message_id is not None:
            self.message_id = message_id
        if message_body is not None:
            self.message_body = message_body
        if start_new_thread is not None:
            self.start_new_thread = start_new_thread

    @property
    def await_reply(self):
        """Gets the await_reply of this SendReplyMessageArgs.  # noqa: E501


        :return: The await_reply of this SendReplyMessageArgs.  # noqa: E501
        :rtype: AwaitReply
        """
        return self._await_reply

    @await_reply.setter
    def await_reply(self, await_reply):
        """Sets the await_reply of this SendReplyMessageArgs.


        :param await_reply: The await_reply of this SendReplyMessageArgs.  # noqa: E501
        :type: AwaitReply
        """

        self._await_reply = await_reply

    @property
    def message_id(self):
        """Gets the message_id of this SendReplyMessageArgs.  # noqa: E501

        ID of the message replying to  # noqa: E501

        :return: The message_id of this SendReplyMessageArgs.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this SendReplyMessageArgs.

        ID of the message replying to  # noqa: E501

        :param message_id: The message_id of this SendReplyMessageArgs.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def message_body(self):
        """Gets the message_body of this SendReplyMessageArgs.  # noqa: E501

        Message body of the reply message  # noqa: E501

        :return: The message_body of this SendReplyMessageArgs.  # noqa: E501
        :rtype: object
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this SendReplyMessageArgs.

        Message body of the reply message  # noqa: E501

        :param message_body: The message_body of this SendReplyMessageArgs.  # noqa: E501
        :type: object
        """

        self._message_body = message_body

    @property
    def start_new_thread(self):
        """Gets the start_new_thread of this SendReplyMessageArgs.  # noqa: E501

        StartNewThread if provided, replies to message by starting a new thread.  # noqa: E501

        :return: The start_new_thread of this SendReplyMessageArgs.  # noqa: E501
        :rtype: bool
        """
        return self._start_new_thread

    @start_new_thread.setter
    def start_new_thread(self, start_new_thread):
        """Sets the start_new_thread of this SendReplyMessageArgs.

        StartNewThread if provided, replies to message by starting a new thread.  # noqa: E501

        :param start_new_thread: The start_new_thread of this SendReplyMessageArgs.  # noqa: E501
        :type: bool
        """

        self._start_new_thread = start_new_thread

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendReplyMessageArgs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendReplyMessageArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
