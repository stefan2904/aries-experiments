# coding: utf-8

"""
    (Aries Agent REST Server) of VC4SM University.

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Attachment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'byte_count': 'int',
        'data': 'AttachmentData',
        'description': 'str',
        'filename': 'str',
        'lastmod_time': 'datetime',
        'mime_type': 'str'
    }

    attribute_map = {
        'id': '@id',
        'byte_count': 'byte_count',
        'data': 'data',
        'description': 'description',
        'filename': 'filename',
        'lastmod_time': 'lastmod_time',
        'mime_type': 'mime-type'
    }

    def __init__(self, id=None, byte_count=None, data=None, description=None, filename=None, lastmod_time=None, mime_type=None):  # noqa: E501
        """Attachment - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._byte_count = None
        self._data = None
        self._description = None
        self._filename = None
        self._lastmod_time = None
        self._mime_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if byte_count is not None:
            self.byte_count = byte_count
        if data is not None:
            self.data = data
        if description is not None:
            self.description = description
        if filename is not None:
            self.filename = filename
        if lastmod_time is not None:
            self.lastmod_time = lastmod_time
        if mime_type is not None:
            self.mime_type = mime_type

    @property
    def id(self):
        """Gets the id of this Attachment.  # noqa: E501

        ID is a JSON-LD construct that uniquely identifies attached content within the scope of a given message. Recommended on appended attachment descriptors. Possible but generally unused on embedded attachment descriptors. Never required if no references to the attachment exist; if omitted, then there is no way to refer to the attachment later in the thread, in error messages, and so forth. Because @id is used to compose URIs, it is recommended that this name be brief and avoid spaces and other characters that require URI escaping.  # noqa: E501

        :return: The id of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attachment.

        ID is a JSON-LD construct that uniquely identifies attached content within the scope of a given message. Recommended on appended attachment descriptors. Possible but generally unused on embedded attachment descriptors. Never required if no references to the attachment exist; if omitted, then there is no way to refer to the attachment later in the thread, in error messages, and so forth. Because @id is used to compose URIs, it is recommended that this name be brief and avoid spaces and other characters that require URI escaping.  # noqa: E501

        :param id: The id of this Attachment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def byte_count(self):
        """Gets the byte_count of this Attachment.  # noqa: E501

        ByteCount is an optional, and mostly relevant when content is included by reference instead of by value. Lets the receiver guess how expensive it will be, in time, bandwidth, and storage, to fully fetch the attachment.  # noqa: E501

        :return: The byte_count of this Attachment.  # noqa: E501
        :rtype: int
        """
        return self._byte_count

    @byte_count.setter
    def byte_count(self, byte_count):
        """Sets the byte_count of this Attachment.

        ByteCount is an optional, and mostly relevant when content is included by reference instead of by value. Lets the receiver guess how expensive it will be, in time, bandwidth, and storage, to fully fetch the attachment.  # noqa: E501

        :param byte_count: The byte_count of this Attachment.  # noqa: E501
        :type: int
        """

        self._byte_count = byte_count

    @property
    def data(self):
        """Gets the data of this Attachment.  # noqa: E501


        :return: The data of this Attachment.  # noqa: E501
        :rtype: AttachmentData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Attachment.


        :param data: The data of this Attachment.  # noqa: E501
        :type: AttachmentData
        """

        self._data = data

    @property
    def description(self):
        """Gets the description of this Attachment.  # noqa: E501

        Description is an optional human-readable description of the content.  # noqa: E501

        :return: The description of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Attachment.

        Description is an optional human-readable description of the content.  # noqa: E501

        :param description: The description of this Attachment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def filename(self):
        """Gets the filename of this Attachment.  # noqa: E501

        FileName is a hint about the name that might be used if this attachment is persisted as a file. It is not required, and need not be unique. If this field is present and mime-type is not, the extension on the filename may be used to infer a MIME type.  # noqa: E501

        :return: The filename of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Attachment.

        FileName is a hint about the name that might be used if this attachment is persisted as a file. It is not required, and need not be unique. If this field is present and mime-type is not, the extension on the filename may be used to infer a MIME type.  # noqa: E501

        :param filename: The filename of this Attachment.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def lastmod_time(self):
        """Gets the lastmod_time of this Attachment.  # noqa: E501

        LastModTime is a hint about when the content in this attachment was last modified.  # noqa: E501

        :return: The lastmod_time of this Attachment.  # noqa: E501
        :rtype: datetime
        """
        return self._lastmod_time

    @lastmod_time.setter
    def lastmod_time(self, lastmod_time):
        """Sets the lastmod_time of this Attachment.

        LastModTime is a hint about when the content in this attachment was last modified.  # noqa: E501

        :param lastmod_time: The lastmod_time of this Attachment.  # noqa: E501
        :type: datetime
        """

        self._lastmod_time = lastmod_time

    @property
    def mime_type(self):
        """Gets the mime_type of this Attachment.  # noqa: E501

        MimeType describes the MIME type of the attached content. Optional but recommended.  # noqa: E501

        :return: The mime_type of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Attachment.

        MimeType describes the MIME type of the attached content. Optional but recommended.  # noqa: E501

        :param mime_type: The mime_type of this Attachment.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Attachment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Attachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
