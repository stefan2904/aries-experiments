# coding: utf-8

"""
    (Aries Agent REST Server) of VC4SM University.

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateConnectionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'implicit': 'bool',
        'invitation_did': 'str',
        'invitation_id': 'str',
        'my_did': 'str',
        'parent_thread_id': 'str',
        'their_did': 'DIDDocument',
        'their_label': 'str',
        'thread_id': 'str'
    }

    attribute_map = {
        'implicit': 'implicit',
        'invitation_did': 'invitationDID',
        'invitation_id': 'invitationID',
        'my_did': 'myDID',
        'parent_thread_id': 'parentThreadID',
        'their_did': 'theirDID',
        'their_label': 'theirLabel',
        'thread_id': 'threadID'
    }

    def __init__(self, implicit=None, invitation_did=None, invitation_id=None, my_did=None, parent_thread_id=None, their_did=None, their_label=None, thread_id=None):  # noqa: E501
        """CreateConnectionRequest - a model defined in Swagger"""  # noqa: E501

        self._implicit = None
        self._invitation_did = None
        self._invitation_id = None
        self._my_did = None
        self._parent_thread_id = None
        self._their_did = None
        self._their_label = None
        self._thread_id = None
        self.discriminator = None

        if implicit is not None:
            self.implicit = implicit
        if invitation_did is not None:
            self.invitation_did = invitation_did
        if invitation_id is not None:
            self.invitation_id = invitation_id
        if my_did is not None:
            self.my_did = my_did
        if parent_thread_id is not None:
            self.parent_thread_id = parent_thread_id
        if their_did is not None:
            self.their_did = their_did
        if their_label is not None:
            self.their_label = their_label
        if thread_id is not None:
            self.thread_id = thread_id

    @property
    def implicit(self):
        """Gets the implicit of this CreateConnectionRequest.  # noqa: E501


        :return: The implicit of this CreateConnectionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._implicit

    @implicit.setter
    def implicit(self, implicit):
        """Sets the implicit of this CreateConnectionRequest.


        :param implicit: The implicit of this CreateConnectionRequest.  # noqa: E501
        :type: bool
        """

        self._implicit = implicit

    @property
    def invitation_did(self):
        """Gets the invitation_did of this CreateConnectionRequest.  # noqa: E501


        :return: The invitation_did of this CreateConnectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._invitation_did

    @invitation_did.setter
    def invitation_did(self, invitation_did):
        """Sets the invitation_did of this CreateConnectionRequest.


        :param invitation_did: The invitation_did of this CreateConnectionRequest.  # noqa: E501
        :type: str
        """

        self._invitation_did = invitation_did

    @property
    def invitation_id(self):
        """Gets the invitation_id of this CreateConnectionRequest.  # noqa: E501


        :return: The invitation_id of this CreateConnectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._invitation_id

    @invitation_id.setter
    def invitation_id(self, invitation_id):
        """Sets the invitation_id of this CreateConnectionRequest.


        :param invitation_id: The invitation_id of this CreateConnectionRequest.  # noqa: E501
        :type: str
        """

        self._invitation_id = invitation_id

    @property
    def my_did(self):
        """Gets the my_did of this CreateConnectionRequest.  # noqa: E501


        :return: The my_did of this CreateConnectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._my_did

    @my_did.setter
    def my_did(self, my_did):
        """Sets the my_did of this CreateConnectionRequest.


        :param my_did: The my_did of this CreateConnectionRequest.  # noqa: E501
        :type: str
        """

        self._my_did = my_did

    @property
    def parent_thread_id(self):
        """Gets the parent_thread_id of this CreateConnectionRequest.  # noqa: E501


        :return: The parent_thread_id of this CreateConnectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_thread_id

    @parent_thread_id.setter
    def parent_thread_id(self, parent_thread_id):
        """Sets the parent_thread_id of this CreateConnectionRequest.


        :param parent_thread_id: The parent_thread_id of this CreateConnectionRequest.  # noqa: E501
        :type: str
        """

        self._parent_thread_id = parent_thread_id

    @property
    def their_did(self):
        """Gets the their_did of this CreateConnectionRequest.  # noqa: E501


        :return: The their_did of this CreateConnectionRequest.  # noqa: E501
        :rtype: DIDDocument
        """
        return self._their_did

    @their_did.setter
    def their_did(self, their_did):
        """Sets the their_did of this CreateConnectionRequest.


        :param their_did: The their_did of this CreateConnectionRequest.  # noqa: E501
        :type: DIDDocument
        """

        self._their_did = their_did

    @property
    def their_label(self):
        """Gets the their_label of this CreateConnectionRequest.  # noqa: E501


        :return: The their_label of this CreateConnectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._their_label

    @their_label.setter
    def their_label(self, their_label):
        """Sets the their_label of this CreateConnectionRequest.


        :param their_label: The their_label of this CreateConnectionRequest.  # noqa: E501
        :type: str
        """

        self._their_label = their_label

    @property
    def thread_id(self):
        """Gets the thread_id of this CreateConnectionRequest.  # noqa: E501


        :return: The thread_id of this CreateConnectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """Sets the thread_id of this CreateConnectionRequest.


        :param thread_id: The thread_id of this CreateConnectionRequest.  # noqa: E501
        :type: str
        """

        self._thread_id = thread_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateConnectionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateConnectionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
