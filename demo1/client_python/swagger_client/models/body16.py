# coding: utf-8

"""
    (Aries Agent REST Server) of VC4SM University.

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body16(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attachments': 'list[Attachment]',
        'goal': 'str',
        'goal_code': 'str',
        'label': 'str',
        'router_connection_id': 'str',
        'service': 'list[object]'
    }

    attribute_map = {
        'attachments': 'attachments',
        'goal': 'goal',
        'goal_code': 'goal_code',
        'label': 'label',
        'router_connection_id': 'router_connection_id',
        'service': 'service'
    }

    def __init__(self, attachments=None, goal=None, goal_code=None, label=None, router_connection_id=None, service=None):  # noqa: E501
        """Body16 - a model defined in Swagger"""  # noqa: E501

        self._attachments = None
        self._goal = None
        self._goal_code = None
        self._label = None
        self._router_connection_id = None
        self._service = None
        self.discriminator = None

        self.attachments = attachments
        if goal is not None:
            self.goal = goal
        if goal_code is not None:
            self.goal_code = goal_code
        if label is not None:
            self.label = label
        if router_connection_id is not None:
            self.router_connection_id = router_connection_id
        if service is not None:
            self.service = service

    @property
    def attachments(self):
        """Gets the attachments of this Body16.  # noqa: E501

        Attachments is intended to provide the possibility to include files, links or even JSON payload to the message.  # noqa: E501

        :return: The attachments of this Body16.  # noqa: E501
        :rtype: list[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Body16.

        Attachments is intended to provide the possibility to include files, links or even JSON payload to the message.  # noqa: E501

        :param attachments: The attachments of this Body16.  # noqa: E501
        :type: list[Attachment]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")  # noqa: E501

        self._attachments = attachments

    @property
    def goal(self):
        """Gets the goal of this Body16.  # noqa: E501


        :return: The goal of this Body16.  # noqa: E501
        :rtype: str
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this Body16.


        :param goal: The goal of this Body16.  # noqa: E501
        :type: str
        """

        self._goal = goal

    @property
    def goal_code(self):
        """Gets the goal_code of this Body16.  # noqa: E501


        :return: The goal_code of this Body16.  # noqa: E501
        :rtype: str
        """
        return self._goal_code

    @goal_code.setter
    def goal_code(self, goal_code):
        """Sets the goal_code of this Body16.


        :param goal_code: The goal_code of this Body16.  # noqa: E501
        :type: str
        """

        self._goal_code = goal_code

    @property
    def label(self):
        """Gets the label of this Body16.  # noqa: E501


        :return: The label of this Body16.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Body16.


        :param label: The label of this Body16.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def router_connection_id(self):
        """Gets the router_connection_id of this Body16.  # noqa: E501


        :return: The router_connection_id of this Body16.  # noqa: E501
        :rtype: str
        """
        return self._router_connection_id

    @router_connection_id.setter
    def router_connection_id(self, router_connection_id):
        """Sets the router_connection_id of this Body16.


        :param router_connection_id: The router_connection_id of this Body16.  # noqa: E501
        :type: str
        """

        self._router_connection_id = router_connection_id

    @property
    def service(self):
        """Gets the service of this Body16.  # noqa: E501


        :return: The service of this Body16.  # noqa: E501
        :rtype: list[object]
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Body16.


        :param service: The service of this Body16.  # noqa: E501
        :type: list[object]
        """

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body16, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body16):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
