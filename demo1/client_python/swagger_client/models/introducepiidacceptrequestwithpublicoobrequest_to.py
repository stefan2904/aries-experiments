# coding: utf-8

"""
    (Aries Agent REST Server) of VC4SM University.

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IntroducepiidacceptrequestwithpublicoobrequestTo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'descriptionl10n': 'DescriptionL10N',
        'imgattach': 'ImgAttach',
        'name': 'str',
        'proposed': 'bool',
        'where': 'str'
    }

    attribute_map = {
        'description': 'description',
        'descriptionl10n': 'description~l10n',
        'imgattach': 'img~attach',
        'name': 'name',
        'proposed': 'proposed',
        'where': 'where'
    }

    def __init__(self, description=None, descriptionl10n=None, imgattach=None, name=None, proposed=None, where=None):  # noqa: E501
        """IntroducepiidacceptrequestwithpublicoobrequestTo - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._descriptionl10n = None
        self._imgattach = None
        self._name = None
        self._proposed = None
        self._where = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if descriptionl10n is not None:
            self.descriptionl10n = descriptionl10n
        if imgattach is not None:
            self.imgattach = imgattach
        if name is not None:
            self.name = name
        if proposed is not None:
            self.proposed = proposed
        if where is not None:
            self.where = where

    @property
    def description(self):
        """Gets the description of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501


        :return: The description of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IntroducepiidacceptrequestwithpublicoobrequestTo.


        :param description: The description of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def descriptionl10n(self):
        """Gets the descriptionl10n of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501


        :return: The descriptionl10n of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501
        :rtype: DescriptionL10N
        """
        return self._descriptionl10n

    @descriptionl10n.setter
    def descriptionl10n(self, descriptionl10n):
        """Sets the descriptionl10n of this IntroducepiidacceptrequestwithpublicoobrequestTo.


        :param descriptionl10n: The descriptionl10n of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501
        :type: DescriptionL10N
        """

        self._descriptionl10n = descriptionl10n

    @property
    def imgattach(self):
        """Gets the imgattach of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501


        :return: The imgattach of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501
        :rtype: ImgAttach
        """
        return self._imgattach

    @imgattach.setter
    def imgattach(self, imgattach):
        """Sets the imgattach of this IntroducepiidacceptrequestwithpublicoobrequestTo.


        :param imgattach: The imgattach of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501
        :type: ImgAttach
        """

        self._imgattach = imgattach

    @property
    def name(self):
        """Gets the name of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501


        :return: The name of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IntroducepiidacceptrequestwithpublicoobrequestTo.


        :param name: The name of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def proposed(self):
        """Gets the proposed of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501


        :return: The proposed of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this IntroducepiidacceptrequestwithpublicoobrequestTo.


        :param proposed: The proposed of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def where(self):
        """Gets the where of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501


        :return: The where of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501
        :rtype: str
        """
        return self._where

    @where.setter
    def where(self, where):
        """Sets the where of this IntroducepiidacceptrequestwithpublicoobrequestTo.


        :param where: The where of this IntroducepiidacceptrequestwithpublicoobrequestTo.  # noqa: E501
        :type: str
        """

        self._where = where

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntroducepiidacceptrequestwithpublicoobrequestTo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntroducepiidacceptrequestwithpublicoobrequestTo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
