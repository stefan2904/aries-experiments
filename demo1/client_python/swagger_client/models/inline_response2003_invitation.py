# coding: utf-8

"""
    (Aries Agent REST Server) of VC4SM University.

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2003Invitation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'did': 'str',
        'image_url': 'str',
        'label': 'str',
        'recipient_keys': 'list[str]',
        'routing_keys': 'list[str]',
        'service_endpoint': 'str',
        'thread': 'Thread'
    }

    attribute_map = {
        'id': '@id',
        'type': '@type',
        'did': 'did',
        'image_url': 'imageUrl',
        'label': 'label',
        'recipient_keys': 'recipientKeys',
        'routing_keys': 'routingKeys',
        'service_endpoint': 'serviceEndpoint',
        'thread': '~thread'
    }

    def __init__(self, id=None, type=None, did=None, image_url=None, label=None, recipient_keys=None, routing_keys=None, service_endpoint=None, thread=None):  # noqa: E501
        """InlineResponse2003Invitation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._did = None
        self._image_url = None
        self._label = None
        self._recipient_keys = None
        self._routing_keys = None
        self._service_endpoint = None
        self._thread = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if did is not None:
            self.did = did
        if image_url is not None:
            self.image_url = image_url
        if label is not None:
            self.label = label
        if recipient_keys is not None:
            self.recipient_keys = recipient_keys
        if routing_keys is not None:
            self.routing_keys = routing_keys
        if service_endpoint is not None:
            self.service_endpoint = service_endpoint
        if thread is not None:
            self.thread = thread

    @property
    def id(self):
        """Gets the id of this InlineResponse2003Invitation.  # noqa: E501

        the ID of the connection invitation  # noqa: E501

        :return: The id of this InlineResponse2003Invitation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2003Invitation.

        the ID of the connection invitation  # noqa: E501

        :param id: The id of this InlineResponse2003Invitation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this InlineResponse2003Invitation.  # noqa: E501

        the Type of the connection invitation  # noqa: E501

        :return: The type of this InlineResponse2003Invitation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse2003Invitation.

        the Type of the connection invitation  # noqa: E501

        :param type: The type of this InlineResponse2003Invitation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def did(self):
        """Gets the did of this InlineResponse2003Invitation.  # noqa: E501

        the DID of the connection invitation  # noqa: E501

        :return: The did of this InlineResponse2003Invitation.  # noqa: E501
        :rtype: str
        """
        return self._did

    @did.setter
    def did(self, did):
        """Sets the did of this InlineResponse2003Invitation.

        the DID of the connection invitation  # noqa: E501

        :param did: The did of this InlineResponse2003Invitation.  # noqa: E501
        :type: str
        """

        self._did = did

    @property
    def image_url(self):
        """Gets the image_url of this InlineResponse2003Invitation.  # noqa: E501

        the Image URL of the connection invitation  # noqa: E501

        :return: The image_url of this InlineResponse2003Invitation.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this InlineResponse2003Invitation.

        the Image URL of the connection invitation  # noqa: E501

        :param image_url: The image_url of this InlineResponse2003Invitation.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def label(self):
        """Gets the label of this InlineResponse2003Invitation.  # noqa: E501

        the Label of the connection invitation  # noqa: E501

        :return: The label of this InlineResponse2003Invitation.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this InlineResponse2003Invitation.

        the Label of the connection invitation  # noqa: E501

        :param label: The label of this InlineResponse2003Invitation.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def recipient_keys(self):
        """Gets the recipient_keys of this InlineResponse2003Invitation.  # noqa: E501

        the RecipientKeys for the connection invitation  # noqa: E501

        :return: The recipient_keys of this InlineResponse2003Invitation.  # noqa: E501
        :rtype: list[str]
        """
        return self._recipient_keys

    @recipient_keys.setter
    def recipient_keys(self, recipient_keys):
        """Sets the recipient_keys of this InlineResponse2003Invitation.

        the RecipientKeys for the connection invitation  # noqa: E501

        :param recipient_keys: The recipient_keys of this InlineResponse2003Invitation.  # noqa: E501
        :type: list[str]
        """

        self._recipient_keys = recipient_keys

    @property
    def routing_keys(self):
        """Gets the routing_keys of this InlineResponse2003Invitation.  # noqa: E501

        the RoutingKeys of the connection invitation  # noqa: E501

        :return: The routing_keys of this InlineResponse2003Invitation.  # noqa: E501
        :rtype: list[str]
        """
        return self._routing_keys

    @routing_keys.setter
    def routing_keys(self, routing_keys):
        """Sets the routing_keys of this InlineResponse2003Invitation.

        the RoutingKeys of the connection invitation  # noqa: E501

        :param routing_keys: The routing_keys of this InlineResponse2003Invitation.  # noqa: E501
        :type: list[str]
        """

        self._routing_keys = routing_keys

    @property
    def service_endpoint(self):
        """Gets the service_endpoint of this InlineResponse2003Invitation.  # noqa: E501

        the Service endpoint of the connection invitation  # noqa: E501

        :return: The service_endpoint of this InlineResponse2003Invitation.  # noqa: E501
        :rtype: str
        """
        return self._service_endpoint

    @service_endpoint.setter
    def service_endpoint(self, service_endpoint):
        """Sets the service_endpoint of this InlineResponse2003Invitation.

        the Service endpoint of the connection invitation  # noqa: E501

        :param service_endpoint: The service_endpoint of this InlineResponse2003Invitation.  # noqa: E501
        :type: str
        """

        self._service_endpoint = service_endpoint

    @property
    def thread(self):
        """Gets the thread of this InlineResponse2003Invitation.  # noqa: E501


        :return: The thread of this InlineResponse2003Invitation.  # noqa: E501
        :rtype: Thread
        """
        return self._thread

    @thread.setter
    def thread(self, thread):
        """Sets the thread of this InlineResponse2003Invitation.


        :param thread: The thread of this InlineResponse2003Invitation.  # noqa: E501
        :type: Thread
        """

        self._thread = thread

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003Invitation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003Invitation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
