# coding: utf-8

"""
    (Aries Agent REST Server) of VC4SM University.

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Thread(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pthid': 'str',
        'received_orders': 'dict(str, int)',
        'sender_order': 'int',
        'thid': 'str'
    }

    attribute_map = {
        'pthid': 'pthid',
        'received_orders': 'received_orders',
        'sender_order': 'sender_order',
        'thid': 'thid'
    }

    def __init__(self, pthid=None, received_orders=None, sender_order=None, thid=None):  # noqa: E501
        """Thread - a model defined in Swagger"""  # noqa: E501

        self._pthid = None
        self._received_orders = None
        self._sender_order = None
        self._thid = None
        self.discriminator = None

        if pthid is not None:
            self.pthid = pthid
        if received_orders is not None:
            self.received_orders = received_orders
        if sender_order is not None:
            self.sender_order = sender_order
        if thid is not None:
            self.thid = thid

    @property
    def pthid(self):
        """Gets the pthid of this Thread.  # noqa: E501


        :return: The pthid of this Thread.  # noqa: E501
        :rtype: str
        """
        return self._pthid

    @pthid.setter
    def pthid(self, pthid):
        """Sets the pthid of this Thread.


        :param pthid: The pthid of this Thread.  # noqa: E501
        :type: str
        """

        self._pthid = pthid

    @property
    def received_orders(self):
        """Gets the received_orders of this Thread.  # noqa: E501


        :return: The received_orders of this Thread.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._received_orders

    @received_orders.setter
    def received_orders(self, received_orders):
        """Sets the received_orders of this Thread.


        :param received_orders: The received_orders of this Thread.  # noqa: E501
        :type: dict(str, int)
        """

        self._received_orders = received_orders

    @property
    def sender_order(self):
        """Gets the sender_order of this Thread.  # noqa: E501


        :return: The sender_order of this Thread.  # noqa: E501
        :rtype: int
        """
        return self._sender_order

    @sender_order.setter
    def sender_order(self, sender_order):
        """Sets the sender_order of this Thread.


        :param sender_order: The sender_order of this Thread.  # noqa: E501
        :type: int
        """

        self._sender_order = sender_order

    @property
    def thid(self):
        """Gets the thid of this Thread.  # noqa: E501


        :return: The thid of this Thread.  # noqa: E501
        :rtype: str
        """
        return self._thid

    @thid.setter
    def thid(self, thid):
        """Sets the thid of this Thread.


        :param thid: The thid of this Thread.  # noqa: E501
        :type: str
        """

        self._thid = thid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Thread, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Thread):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
