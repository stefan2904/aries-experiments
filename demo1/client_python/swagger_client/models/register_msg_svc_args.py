# coding: utf-8

"""
    (Aries Agent REST Server) of VC4SM University.

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RegisterMsgSvcArgs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'purpose': 'list[str]',
        'type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'purpose': 'purpose',
        'type': 'type'
    }

    def __init__(self, name=None, purpose=None, type=None):  # noqa: E501
        """RegisterMsgSvcArgs - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._purpose = None
        self._type = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if purpose is not None:
            self.purpose = purpose
        if type is not None:
            self.type = type

    @property
    def name(self):
        """Gets the name of this RegisterMsgSvcArgs.  # noqa: E501

        Name of the message service  # noqa: E501

        :return: The name of this RegisterMsgSvcArgs.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegisterMsgSvcArgs.

        Name of the message service  # noqa: E501

        :param name: The name of this RegisterMsgSvcArgs.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def purpose(self):
        """Gets the purpose of this RegisterMsgSvcArgs.  # noqa: E501

        Acceptance criteria for message service based on message purpose in case of multiple purposes, message will be dispatched if any one of the purpose matches with the purpose of incoming message. Can be provided in conjunction with other acceptance criteria.  # noqa: E501

        :return: The purpose of this RegisterMsgSvcArgs.  # noqa: E501
        :rtype: list[str]
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this RegisterMsgSvcArgs.

        Acceptance criteria for message service based on message purpose in case of multiple purposes, message will be dispatched if any one of the purpose matches with the purpose of incoming message. Can be provided in conjunction with other acceptance criteria.  # noqa: E501

        :param purpose: The purpose of this RegisterMsgSvcArgs.  # noqa: E501
        :type: list[str]
        """

        self._purpose = purpose

    @property
    def type(self):
        """Gets the type of this RegisterMsgSvcArgs.  # noqa: E501

        Acceptance criteria for message service based on message type. Can be provided in conjunction with other acceptance criteria.  # noqa: E501

        :return: The type of this RegisterMsgSvcArgs.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RegisterMsgSvcArgs.

        Acceptance criteria for message service based on message type. Can be provided in conjunction with other acceptance criteria.  # noqa: E501

        :param type: The type of this RegisterMsgSvcArgs.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegisterMsgSvcArgs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterMsgSvcArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
