# coding: utf-8

"""
    (Aries Agent REST Server) of VC4SM University.

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AttachmentData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base64': 'str',
        'json': 'object',
        'links': 'list[str]',
        'sha256': 'str'
    }

    attribute_map = {
        'base64': 'base64',
        'json': 'json',
        'links': 'links',
        'sha256': 'sha256'
    }

    def __init__(self, base64=None, json=None, links=None, sha256=None):  # noqa: E501
        """AttachmentData - a model defined in Swagger"""  # noqa: E501

        self._base64 = None
        self._json = None
        self._links = None
        self._sha256 = None
        self.discriminator = None

        if base64 is not None:
            self.base64 = base64
        if json is not None:
            self.json = json
        if links is not None:
            self.links = links
        if sha256 is not None:
            self.sha256 = sha256

    @property
    def base64(self):
        """Gets the base64 of this AttachmentData.  # noqa: E501

        Base64 encoded data, when representing arbitrary content inline instead of via links. Optional.  # noqa: E501

        :return: The base64 of this AttachmentData.  # noqa: E501
        :rtype: str
        """
        return self._base64

    @base64.setter
    def base64(self, base64):
        """Sets the base64 of this AttachmentData.

        Base64 encoded data, when representing arbitrary content inline instead of via links. Optional.  # noqa: E501

        :param base64: The base64 of this AttachmentData.  # noqa: E501
        :type: str
        """

        self._base64 = base64

    @property
    def json(self):
        """Gets the json of this AttachmentData.  # noqa: E501

        JSON is a directly embedded JSON data, when representing content inline instead of via links, and when the content is natively conveyable as JSON. Optional.  # noqa: E501

        :return: The json of this AttachmentData.  # noqa: E501
        :rtype: object
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this AttachmentData.

        JSON is a directly embedded JSON data, when representing content inline instead of via links, and when the content is natively conveyable as JSON. Optional.  # noqa: E501

        :param json: The json of this AttachmentData.  # noqa: E501
        :type: object
        """

        self._json = json

    @property
    def links(self):
        """Gets the links of this AttachmentData.  # noqa: E501

        Links is a list of zero or more locations at which the content may be fetched.  # noqa: E501

        :return: The links of this AttachmentData.  # noqa: E501
        :rtype: list[str]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AttachmentData.

        Links is a list of zero or more locations at which the content may be fetched.  # noqa: E501

        :param links: The links of this AttachmentData.  # noqa: E501
        :type: list[str]
        """

        self._links = links

    @property
    def sha256(self):
        """Gets the sha256 of this AttachmentData.  # noqa: E501

        Sha256 is a hash of the content. Optional. Used as an integrity check if content is inlined. if content is only referenced, then including this field makes the content tamper-evident. This may be redundant, if the content is stored in an inherently immutable container like content-addressable storage. This may also be undesirable, if dynamic content at a specified link is beneficial. Including a hash without including a way to fetch the content via link is a form of proof of existence.  # noqa: E501

        :return: The sha256 of this AttachmentData.  # noqa: E501
        :rtype: str
        """
        return self._sha256

    @sha256.setter
    def sha256(self, sha256):
        """Sets the sha256 of this AttachmentData.

        Sha256 is a hash of the content. Optional. Used as an integrity check if content is inlined. if content is only referenced, then including this field makes the content tamper-evident. This may be redundant, if the content is stored in an inherently immutable container like content-addressable storage. This may also be undesirable, if dynamic content at a specified link is beneficial. Including a hash without including a way to fetch the content via link is a form of proof of existence.  # noqa: E501

        :param sha256: The sha256 of this AttachmentData.  # noqa: E501
        :type: str
        """

        self._sha256 = sha256

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachmentData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
