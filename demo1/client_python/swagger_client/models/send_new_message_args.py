# coding: utf-8

"""
    (Aries Agent REST Server) of VC4SM University.

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SendNewMessageArgs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'await_reply': 'AwaitReply',
        'connection_id': 'str',
        'message_body': 'object',
        'service_endpoint': 'ServiceEndpointDestinationParams',
        'their_did': 'str'
    }

    attribute_map = {
        'await_reply': 'await_reply',
        'connection_id': 'connection_ID',
        'message_body': 'message_body',
        'service_endpoint': 'service_endpoint',
        'their_did': 'their_did'
    }

    def __init__(self, await_reply=None, connection_id=None, message_body=None, service_endpoint=None, their_did=None):  # noqa: E501
        """SendNewMessageArgs - a model defined in Swagger"""  # noqa: E501

        self._await_reply = None
        self._connection_id = None
        self._message_body = None
        self._service_endpoint = None
        self._their_did = None
        self.discriminator = None

        if await_reply is not None:
            self.await_reply = await_reply
        if connection_id is not None:
            self.connection_id = connection_id
        if message_body is not None:
            self.message_body = message_body
        if service_endpoint is not None:
            self.service_endpoint = service_endpoint
        if their_did is not None:
            self.their_did = their_did

    @property
    def await_reply(self):
        """Gets the await_reply of this SendNewMessageArgs.  # noqa: E501


        :return: The await_reply of this SendNewMessageArgs.  # noqa: E501
        :rtype: AwaitReply
        """
        return self._await_reply

    @await_reply.setter
    def await_reply(self, await_reply):
        """Sets the await_reply of this SendNewMessageArgs.


        :param await_reply: The await_reply of this SendNewMessageArgs.  # noqa: E501
        :type: AwaitReply
        """

        self._await_reply = await_reply

    @property
    def connection_id(self):
        """Gets the connection_id of this SendNewMessageArgs.  # noqa: E501

        Connection ID of the message destination This parameter takes precedence over all the other destination parameters.  # noqa: E501

        :return: The connection_id of this SendNewMessageArgs.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this SendNewMessageArgs.

        Connection ID of the message destination This parameter takes precedence over all the other destination parameters.  # noqa: E501

        :param connection_id: The connection_id of this SendNewMessageArgs.  # noqa: E501
        :type: str
        """

        self._connection_id = connection_id

    @property
    def message_body(self):
        """Gets the message_body of this SendNewMessageArgs.  # noqa: E501

        Message body of the message  # noqa: E501

        :return: The message_body of this SendNewMessageArgs.  # noqa: E501
        :rtype: object
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this SendNewMessageArgs.

        Message body of the message  # noqa: E501

        :param message_body: The message_body of this SendNewMessageArgs.  # noqa: E501
        :type: object
        """

        self._message_body = message_body

    @property
    def service_endpoint(self):
        """Gets the service_endpoint of this SendNewMessageArgs.  # noqa: E501


        :return: The service_endpoint of this SendNewMessageArgs.  # noqa: E501
        :rtype: ServiceEndpointDestinationParams
        """
        return self._service_endpoint

    @service_endpoint.setter
    def service_endpoint(self, service_endpoint):
        """Sets the service_endpoint of this SendNewMessageArgs.


        :param service_endpoint: The service_endpoint of this SendNewMessageArgs.  # noqa: E501
        :type: ServiceEndpointDestinationParams
        """

        self._service_endpoint = service_endpoint

    @property
    def their_did(self):
        """Gets the their_did of this SendNewMessageArgs.  # noqa: E501

        DID of the destination. This parameter takes precedence over `ServiceEndpoint` destination parameter.  # noqa: E501

        :return: The their_did of this SendNewMessageArgs.  # noqa: E501
        :rtype: str
        """
        return self._their_did

    @their_did.setter
    def their_did(self, their_did):
        """Sets the their_did of this SendNewMessageArgs.

        DID of the destination. This parameter takes precedence over `ServiceEndpoint` destination parameter.  # noqa: E501

        :param their_did: The their_did of this SendNewMessageArgs.  # noqa: E501
        :type: str
        """

        self._their_did = their_did

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendNewMessageArgs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendNewMessageArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
